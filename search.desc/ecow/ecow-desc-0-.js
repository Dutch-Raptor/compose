searchState.loadedDescShard("ecow", 0, "Compact, clone-on-write vector and string.\nCreate a new <code>EcoString</code> from a format string.\nCreate a new <code>EcoVec</code> with the given elements.\nA clone-on-write, small-string-optimized alternative to …\nA clone-on-write alternative to <code>Vec</code>.\nAn economical string with inline storage and …\nMaximum number of bytes for an inline <code>EcoString</code> before …\nA string slice containing the entire string.\nClear the string.\nReturns the argument unchanged.\nWhen the string does not fit inline, this needs to …\nCreate a new, inline string.\nCalls <code>U::from(self)</code>.\nWhether the string is empty.\nThe length of the string in bytes.\nProduce a mutable slice containing the entire string.\nCreate a new, empty string.\nRemove the last character from the string.\nAppend the given character at the end.\nAppend the given string slice at the end.\nRepeat this string <code>n</code> times.\nReplaces all matches of a string with another string.\nReplaces the first N matches of a string with another …\nReturns a copy of this string where each character is …\nReturns a copy of this string where each character is …\nReturns the lowercase equivalent of this string.\nReturns the uppercase equivalent of this string.\nShortens the string to the specified length.\nCreate a new, empty string with the given <code>capacity</code>.\nAn economical vector with clone-on-write semantics.\nAn owned iterator over an <code>EcoVec</code>.\nExtracts a slice containing the entire vector.\nReturns the remaining items of this iterator as a slice.\nHow many elements the vector’s backing allocation can …\nRemoves all values from the vector.\nClones and pushes all elements in a slice to the vector.\nPushes all elements in a trusted-len iterator to the …\nThis needs to allocate to change the layout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new vector with <code>n</code> copies of <code>value</code>.\nInserts an element at an index within the vector, shifting …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the vector contains no elements.\nWhether no other vector is pointing to the same backing …\nThe number of elements in the vector.\nProduce a mutable slice containing the entire vector.\nCreate a new, empty vector.\nRemoves the last element from a vector and returns it, or …\nAdd a value at the end of the vector.\nRemoves and returns the element at position index within …\nReserve space for at least <code>additional</code> more elements.\nRetains only the elements specified by the predicate.\nShortens the vector, keeping the first <code>target</code> elements and …\nCreate a new, empty vector with at least the specified …")