use std::fs;
use std::path::Path;

fn main() {
    let mut files = walkdir::WalkDir::new("src/codes")
        .into_iter()
        .filter_map(|e| e.ok())
        .filter(|e| e.file_type().is_file() && e.path().extension().unwrap_or_default() == "md")
        .collect::<Vec<_>>();

    // Sort for build determinism
    files.sort_by_key(|f| f.path().to_owned());

    let out_dir = std::env::var("OUT_DIR").unwrap();
    let codes_path = "src/codes";
    println!("cargo:rerun-if-changed={codes_path}");

    let mut out = String::new();
    out.push_str("// This file is @generated by build.rs\n");

    let mut lookup_matches = String::new();

    for file in files {
        let path = file.path();
        println!("cargo:rerun-if-changed={}", path.display());
        let name = file
            .path()
            .file_stem()
            .and_then(|s| s.to_str())
            .expect("invalid file name")
            .to_uppercase();
        let split = name.split('_').collect::<Vec<_>>();
        assert!(
            split.len() >= 2,
            "invalid file name: {}. Expected CODE_NAME.md",
            name
        );
        let code = split[0];
        let title = split[1..].join(" ");

        let contents = fs::read_to_string(file.path()).unwrap();

        // Create the documentation
        out.push_str("/**");
        out.push_str(contents.as_str());
        out.push_str("*/\n");
        out.push_str(&format!(
            r#"
            pub const {name}: ErrorCode = ErrorCode {{
                code: "{code}",
                name: "{title}",
                description: "{contents}",
            }};
        "#,
            contents = escape(&contents),
        ));
        out.push_str("\n\n");

        lookup_matches.push_str(&format!(
            r#"
                "{code}" => &{name},
            "#,
        ));
    }

    out.push_str(&format!(
        r#"
        /// Find an error code by its code.
        pub fn lookup(code: &str) -> Option<&'static ErrorCode> {{
            Some(match code {{
                {lookup_matches}
                _ => return None,
            }})
        }}
    "#
    ));

    fs::write(Path::new(&out_dir).join("error_codes.rs"), out)
        .expect("failed to write error_codes.rs");
}

fn escape(s: &str) -> String {
    s.replace('\\', "\\\\")
        .replace('"', "\\\"")
        .replace('\n', "\\n")
        .replace('\r', "\\r")
}
